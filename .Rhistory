Tarjetas_A_5=c(Tarjetas_A_5,goles12)
Tarjetas_A_5_pr=c(Tarjetas_A_5_pr,goles_pr12)
goles13=sum(Tarjetas_AC[i+1],Tarjetas_AC[i+2],Tarjetas_AC[i+3],Tarjetas_AC[i+4],Tarjetas_AC[i+5])
goles_pr13=(sum(Tarjetas_AC[i+1],Tarjetas_AC[i+2],Tarjetas_AC[i+3],Tarjetas_AC[i+4],Tarjetas_AC[i+5])/5)
Tarjetas_AC_5=c(Tarjetas_AC_5,goles13)
Tarjetas_AC_5_pr=c(Tarjetas_AC_5_pr,goles_pr13)
goles14=sum(Tarjetas_R[i+1],Tarjetas_R[i+2],Tarjetas_R[i+3],Tarjetas_R[i+4],Tarjetas_R[i+5])
goles_pr14=(sum(Tarjetas_R[i+1],Tarjetas_R[i+2],Tarjetas_R[i+3],Tarjetas_R[i+4],Tarjetas_R[i+5])/5)
Tarjetas_R_5=c(Tarjetas_R_5,goles14)
Tarjetas_R_5_pr=c(Tarjetas_R_5_pr,goles_pr14)
goles15=sum(Tarjetas_RC[i+1],Tarjetas_RC[i+2],Tarjetas_RC[i+3],Tarjetas_RC[i+4],Tarjetas_RC[i+5])
goles_pr15=(sum(Tarjetas_RC[i+1],Tarjetas_RC[i+2],Tarjetas_RC[i+3],Tarjetas_RC[i+4],Tarjetas_RC[i+5])/5)
Tarjetas_RC_5=c(Tarjetas_RC_5,goles15)
Tarjetas_RC_5_pr=c(Tarjetas_RC_5_pr,goles_pr15)
efectividad_P=c(efectividad_P, (sum(Goles_M[i+1]/Tiros[i+1],Goles_M[i+2]/Tiros[i+2],Goles_M[i+3]/Tiros[i+3],Goles_M[i+4]/Tiros[i+4],Goles_M[i+5]/Tiros[i+5]))/5)
efectividad_R=c(efectividad_R, (sum(Goles_R[i+1]/Tiros_C[i+1],Goles_R[i+2]/Tiros_C[i+2],Goles_R[i+3]/Tiros_C[i+3],Goles_R[i+4]/Tiros_C[i+4],Goles_R[i+5]/Tiros_C[i+5]))/5)
}
sapply(partidos, function(x) sum(is.na(x)))
sum(is.na(partidos))
which(colnames(partidos)=="datos_valor")
View(partidos)
names(partidos)[29]<- "Valor Equipo"
View(partidos)
partidos=cbind(partidos,goles_5_M,goles_5_M_pr,goles_5_R,goles_5_R_pr,puntos, Puntos_5, efectividad_P,
Tiros_5,Tiros_5_pr,Tiros_5_P,Tiros_5_P_pr,Tiros_5_C,Tiros_5_C_pr,Tiros_5_PC,Tiros_5_PC_pr,
Faltas_5,Faltas_5_pr,Faltas_5_C,Faltas_5_C_pr,Corners_5,Corners_5_pr,Corners_C_5,Corners_5_C_pr,
Tarjetas_A_5,Tarjetas_A_5_pr,Tarjetas_AC_5,Tarjetas_AC_5_pr,Tarjetas_R_5,Tarjetas_R_5_pr,Tarjetas_RC_5,Tarjetas_RC_5_pr,efectividad_R)
partidos<- partidos[-c(10316:10320),]
sapply(partidos, function(x) sum(is.na(x)))
prob_5_M=partidos$goles_5_M/(max(partidos$goles_5_M))
prob_5_R=partidos$goles_5_R/(max(partidos$goles_5_R))
prob_5_Puntos=partidos$Puntos_5/15
prob_5_Tiros=partidos$Tiros_5/(max(partidos$Tiros_5))
prob_5_Tiros_P=partidos$Tiros_5_P/(max(partidos$Tiros_5_P))
prob_5_Tiros_C=partidos$Tiros_5_C/(max(partidos$Tiros_5_C))
prob_5_Tiros_PC=partidos$Tiros_5_PC/(max(partidos$Tiros_5_PC))
prob_5_Taltas=partidos$Faltas_5/(max(partidos$Faltas_5))
prob_5_Faltas_C=partidos$Faltas_5_C/(max(partidos$Faltas_5_C))
prob_5_Corners=partidos$Corners_5/(max(partidos$Corners_5))
prob_5_Corners_C=partidos$Corners_C_5/(max(partidos$Corners_C_5))
prob_5_Tarjetas_A=partidos$Tarjetas_A_5/(max(partidos$Tarjetas_A_5))
prob_5_Tarjetas_AC=partidos$Tarjetas_AC_5/(max(partidos$Tarjetas_AC_5))
prob_5_Tarjetas_R=partidos$Tarjetas_R_5/(max(partidos$Tarjetas_R_5))
prob_5_Tarjetas_RC=partidos$Tarjetas_RC_5/(max(partidos$Tarjetas_RC_5))
partidos=cbind(partidos,prob_5_M,prob_5_R,prob_5_Puntos,prob_5_Tiros,prob_5_Tiros_P,prob_5_Tiros_C,prob_5_Tiros_PC,
prob_5_Taltas,prob_5_Faltas_C,prob_5_Corners,prob_5_Corners_C,
prob_5_Tarjetas_A,prob_5_Tarjetas_AC,prob_5_Tarjetas_R,prob_5_Tarjetas_RC)
View(partidos)
# CONTRINCANTE ------------------------------------------------------------
str(partidos)
partidos_total=partidos
partidos_total=partidos_total %>%
subset(Temporada=="2015-2016"|
Temporada=="2016-2017"|Temporada=="2017-2018"|
Temporada=="2018-2019"|Temporada=="2019-2020")
which(colnames(partidos)=="Equipo")
Fuera_P<-partidos%>%
subset(Ubicacion=="Away")
Casa_P<-partidos%>%
subset(Ubicacion=="Home")
temporadas<-levels(partidos_total$Temporada)
nombres_equipos<-levels(partidos_total$Equipo)
which(colnames(partidos_total)=="goles_5_M")
efectividad_partidos<-(partidos_total[,9]/partidos_total[,17])
View(partidos_total)
View(partidos_total)
#         }
#       }
#     }
#   }
# }
#
#
# j
# length(efectividad_equipos3)
# View(efectividad_equipos3)
a=c()
b=as.data.frame(a)
for(k in 1:dim(partidos_total)[1]){
for(i in 1:dim(partidos_total)[1]){
if(partidos_total[k,1]==partidos_total[i,1]&(partidos_total[k,4]!=partidos_total[i,4])){
b=rbind(b,partidos_total[i,])
}
}
}
write.xlsx(b,"G:\\Mi unidad\\RETOS\\RETO 3\\contrincante.xlsx", row.names = T)
directorio <- "G:/Mi unidad/RETOS/RETO 3"
archivo3<-"contrincante.xlsx"
View(b)
b <- read_excel(file.path(directorio, archivo3),1)
View(b)
b<-b[,-1]
View(b)
View(partidos_total)
which(colnames(partidos_m)=="Tiros_5")
which(colnames(partidos_total)=="Tiros_5")
which(colnames(partidos_total)=="efectividad_R")
View(partidos_total)
partidos_modelo<-partidos_total[,-c(1:4,6:11,13:28,30,32,34,37,39,41,43,45,47,49,51,53,55,57,59)]
b_modelo<-b[,-c(1:28,30,32,34,37,39,41,43,45,47,49,51,53,55,57,59)]
partidos_final=cbind(partidos_modelo,b_modelo)
View(partidos_final)
partidos_final=partidos_final%>%
subset(Ubicacion=="Home")
partidos_final=partidos_final[,-1]
names(partidos_final)
which(colnames(partidos_total)=="TRC")
sapply(partidos_final, function(x) sum(is.na(x)))
View(partidos_final)
(diagrama_calor=GGally::ggcorr(cor(partidos_final[,-1]), method = c("everything", "pearson")))
which(tabla_correlaciones >= 0.9 & tabla_correlaciones != 1| tabla_correlaciones <= -0.9 & tabla_correlaciones != -1, arr.ind=TRUE)
which(tabla_correlaciones >= 0.8 & tabla_correlaciones != 1| tabla_correlaciones <= -0.8 & tabla_correlaciones != -1, arr.ind=TRUE)
which(tabla_correlaciones >= 0.7 & tabla_correlaciones != 1| tabla_correlaciones <= -0.7 & tabla_correlaciones != -1, arr.ind=TRUE)
tabla_correlaciones=as.data.frame(cor(partidos_final[,-1]))
(diagrama_calor=GGally::ggcorr(cor(partidos_final[,-1]), method = c("everything", "pearson")))
which(tabla_correlaciones >= 0.7 & tabla_correlaciones != 1| tabla_correlaciones <= -0.7 & tabla_correlaciones != -1, arr.ind=TRUE)
tabla_correlaciones=as.data.frame(cor(partidos_final[,-1]))
(diagrama_calor=GGally::ggcorr(cor(partidos_final[,-1]), method = c("everything", "pearson")))
which(tabla_correlaciones >= 0.8 & tabla_correlaciones != 1| tabla_correlaciones <= -0.8 & tabla_correlaciones != -1, arr.ind=TRUE)
tabla_correlaciones=as.data.frame(cor(partidos_final[,-1]))
(diagrama_calor=GGally::ggcorr(cor(partidos_final[,-1]), method = c("everything", "pearson")))
which(tabla_correlaciones >= 0.9 & tabla_correlaciones != 1| tabla_correlaciones <= -0.9 & tabla_correlaciones != -1, arr.ind=TRUE)
partidos_final
nombres_equipos<-levels(datos_validos_ID$Equipo)
nombres_equipos
partidos_m=c()
for(k in nombres_equipos){
k<-datos_validos_ID %>%
subset(Equipo==k)
partidos_m<-rbind(partidos_m,k)
}
puntos=partidos_m$Resultado
puntos <- unlist(lapply(puntos, as.character))
puntos <- unlist(lapply(puntos, as.numeric))
for(k in 1:length(puntos)){
if(puntos[k] == 1.0){
puntos[k]=3
}
if(puntos[k] == 0.5){
puntos[k]=1
}
if(puntos[k] == 0.0){
puntos[k]=0
}
}
class(puntos)
Puntos_5=c()
goles_5_M=c()
goles_5_M_pr=c()
goles_5_R=c()
goles_5_R_pr=c()
Tiros_5=c()
Tiros_5_pr=c()
Tiros_5_P=c()
Tiros_5_P_pr=c()
Tiros_5_C=c()
Tiros_5_C_pr=c()
Tiros_5_PC=c()
Tiros_5_PC_pr=c()
Faltas_5=c()
Faltas_5_pr=c()
Faltas_5_C=c()
Faltas_5_C_pr=c()
Corners_5=c()
Corners_5_pr=c()
Corners_C_5=c()
Corners_5_C_pr=c()
Tarjetas_A_5=c()
Tarjetas_A_5_pr=c()
Tarjetas_AC_5=c()
Tarjetas_AC_5_pr=c()
Tarjetas_R_5=c()
Tarjetas_R_5_pr=c()
Tarjetas_RC_5=c()
Tarjetas_RC_5_pr=c()
efectividad_P=c()
Goles_M=partidos_m$GM
Goles_R=partidos_m$GR
Tiros=partidos_m[,17]
Tiros_P=partidos_m$TP
Tiros_C=partidos_m$TC
Tiros_PC=partidos_m$TPC
Faltas=partidos_m[,21]
Faltas_C=partidos_m$FC
Corners=partidos_m$C
Corcers_C=partidos_m$CC
Tarjetas_A=partidos_m$TA
Tarjetas_AC=partidos_m$TAC
Tarjetas_R=partidos_m$TR
Tarjetas_RC=partidos_m$TRC
partidos_m=partidos_m[,-29]
efectividad_R=c()
for(i in 1:length(Goles_M)){
goles1=sum(Goles_M[i],Goles_M[i+1],Goles_M[i+2],Goles_M[i+3],Goles_M[i+4])
goles_pr1=(sum(Goles_M[i],Goles_M[i+1],Goles_M[i+2],Goles_M[i+3],Goles_M[i+4])/5)
goles_5_M=c(goles_5_M,goles1)
goles_5_M_pr=c(goles_5_M_pr,goles_pr1)
goles2=sum(Goles_R[i],Goles_R[i+1],Goles_R[i+2],Goles_R[i+3],Goles_R[i+4])
goles_pr2=(sum(Goles_R[i],Goles_R[i+1],Goles_R[i+2],Goles_R[i+3],Goles_R[i+4])/5)
goles_5_R=c(goles_5_R,goles2)
goles_5_R_pr=c(goles_5_R_pr,goles_pr2)
goles3=sum(Tiros[i],Tiros[i+1],Tiros[i+2],Tiros[i+3],Tiros[i+4])
goles_pr3=(sum(Tiros[i],Tiros[i+1],Tiros[i+2],Tiros[i+3],Tiros[i+4])/5)
Tiros_5=c(Tiros_5,goles3)
Tiros_5_pr=c(Tiros_5_pr,goles_pr3)
goles4=sum(puntos[i],puntos[i+1],puntos[i+2],puntos[i+3],puntos[i+4])
Puntos_5=c(Puntos_5,goles4)
goles5=sum(Tiros_P[i],Tiros_P[i+1],Tiros_P[i+2],Tiros_P[i+3],Tiros_P[i+4])
goles_pr5=(sum(Tiros_P[i],Tiros_P[i+1],Tiros_P[i+2],Tiros_P[i+3],Tiros_P[i+4])/5)
Tiros_5_P=c(Tiros_5_P,goles5)
Tiros_5_P_pr=c(Tiros_5_P_pr,goles_pr5)
goles6=sum(Tiros_C[i],Tiros_C[i+1],Tiros_C[i+2],Tiros_C[i+3],Tiros_C[i+4])
goles_pr6=(sum(Tiros_C[i],Tiros_C[i+1],Tiros_C[i+2],Tiros_C[i+3],Tiros_C[i+4])/5)
Tiros_5_C=c(Tiros_5_C,goles6)
Tiros_5_C_pr=c(Tiros_5_C_pr,goles_pr6)
goles7=sum(Tiros_PC[i],Tiros_PC[i+1],Tiros_PC[i+2],Tiros_PC[i+3],Tiros_PC[i+4])
goles_pr7=(sum(Tiros_PC[i],Tiros_PC[i+1],Tiros_PC[i+2],Tiros_PC[i+3],Tiros_PC[i+4])/5)
Tiros_5_PC=c(Tiros_5_PC,goles7)
Tiros_5_PC_pr=c(Tiros_5_PC_pr,goles_pr7)
goles8=sum(Faltas[i],Faltas[i+1],Faltas[i+2],Faltas[i+3],Faltas[i+4])
goles_pr8=(sum(Faltas[i],Faltas[i+1],Faltas[i+2],Faltas[i+3],Faltas[i+4])/5)
Faltas_5=c(Faltas_5,goles8)
Faltas_5_pr=c(Faltas_5_pr,goles_pr8)
goles9=sum(Faltas_C[i],Faltas_C[i+1],Faltas_C[i+2],Faltas_C[i+3],Faltas_C[i+4])
goles_pr9=(sum(Faltas_C[i],Faltas_C[i+1],Faltas_C[i+2],Faltas_C[i+3],Faltas_C[i+4])/5)
Faltas_5_C=c(Faltas_5_C,goles9)
Faltas_5_C_pr=c(Faltas_5_C_pr,goles_pr9)
goles10=sum(Corners[i],Corners[i+1],Corners[i+2],Corners[i+3],Corners[i+4])
goles_pr10=(sum(Corners[i],Corners[i+1],Corners[i+2],Corners[i+3],Corners[i+4])/5)
Corners_5=c(Corners_5,goles10)
Corners_5_pr=c(Corners_5_pr,goles_pr10)
goles11=sum(Corcers_C[i],Corcers_C[i+1],Corcers_C[i+2],Corcers_C[i+3],Corcers_C[i+4])
goles_pr11=(sum(Corcers_C[i],Corcers_C[i+1],Corcers_C[i+2],Corcers_C[i+3],Corcers_C[i+4])/5)
Corners_C_5=c(Corners_C_5,goles11)
Corners_5_C_pr=c(Corners_5_C_pr,goles_pr11)
goles12=sum(Tarjetas_A[i],Tarjetas_A[i+1],Tarjetas_A[i+2],Tarjetas_A[i+3],Tarjetas_A[i+4])
goles_pr12=(sum(Tarjetas_A[i],Tarjetas_A[i+1],Tarjetas_A[i+2],Tarjetas_A[i+3],Tarjetas_A[i+4])/5)
Tarjetas_A_5=c(Tarjetas_A_5,goles12)
Tarjetas_A_5_pr=c(Tarjetas_A_5_pr,goles_pr12)
goles13=sum(Tarjetas_AC[i],Tarjetas_AC[i+1],Tarjetas_AC[i+2],Tarjetas_AC[i+3],Tarjetas_AC[i+4])
goles_pr13=(sum(Tarjetas_AC[i],Tarjetas_AC[i+1],Tarjetas_AC[i+2],Tarjetas_AC[i+3],Tarjetas_AC[i+4])/5)
Tarjetas_AC_5=c(Tarjetas_AC_5,goles13)
Tarjetas_AC_5_pr=c(Tarjetas_AC_5_pr,goles_pr13)
goles14=sum(Tarjetas_R[i],Tarjetas_R[i+1],Tarjetas_R[i+2],Tarjetas_R[i+3],Tarjetas_R[i+4])
goles_pr14=(sum(Tarjetas_R[i],Tarjetas_R[i+1],Tarjetas_R[i+2],Tarjetas_R[i+3],Tarjetas_R[i+4])/5)
Tarjetas_R_5=c(Tarjetas_R_5,goles14)
Tarjetas_R_5_pr=c(Tarjetas_R_5_pr,goles_pr14)
goles15=sum(Tarjetas_RC[i],Tarjetas_RC[i+1],Tarjetas_RC[i+2],Tarjetas_RC[i+3],Tarjetas_RC[i+4])
goles_pr15=(sum(Tarjetas_RC[i],Tarjetas_RC[i+1],Tarjetas_RC[i+2],Tarjetas_RC[i+3],Tarjetas_RC[i+4])/5)
Tarjetas_RC_5=c(Tarjetas_RC_5,goles15)
Tarjetas_RC_5_pr=c(Tarjetas_RC_5_pr,goles_pr15)
efectividad_P=c(efectividad_P, (sum(Goles_M[i]/Tiros[i],Goles_M[i+1]/Tiros[i+1],Goles_M[i+2]/Tiros[i+2],Goles_M[i+3]/Tiros[i+3],Goles_M[i+4]/Tiros[i+4]))/5)
efectividad_R=c(efectividad_R, (sum(Goles_R[i+1]/Tiros_C[i+1],Goles_R[i+2]/Tiros_C[i+2],Goles_R[i+3]/Tiros_C[i+3],Goles_R[i+4]/Tiros_C[i+4],Goles_R[i+5]/Tiros_C[i+5]))/5)
}
sapply(partidos_m, function(x) sum(is.na(x)))
sum(is.na(partidos_m))
which(colnames(partidos_m)=="datos_valor")
names(partidos_m)[29]<- "Valor Equipo"
partidos_m=cbind(partidos_m,goles_5_M,goles_5_M_pr,goles_5_R,goles_5_R_pr,puntos, Puntos_5, efectividad_P,
Tiros_5,Tiros_5_pr,Tiros_5_P,Tiros_5_P_pr,Tiros_5_C,Tiros_5_C_pr,Tiros_5_PC,Tiros_5_PC_pr,
Faltas_5,Faltas_5_pr,Faltas_5_C,Faltas_5_C_pr,Corners_5,Corners_5_pr,Corners_C_5,Corners_5_C_pr,
Tarjetas_A_5,Tarjetas_A_5_pr,Tarjetas_AC_5,Tarjetas_AC_5_pr,Tarjetas_R_5,Tarjetas_R_5_pr,Tarjetas_RC_5,Tarjetas_RC_5_pr,efectividad_R)
sum(is.na(partidos_m))
sapply(partidos_m, function(x) sum(is.na(x)))
partidos_m<- partidos_m[-c(10316:10320),]
sapply(partidos_m, function(x) sum(is.na(x)))
prob_5_M=partidos_m$goles_5_M/(max(partidos_m$goles_5_M))
prob_5_R=partidos_m$goles_5_R/(max(partidos_m$goles_5_R))
prob_5_Puntos=partidos_m$Puntos_5/15
prob_5_Tiros=partidos_m$Tiros_5/(max(partidos_m$Tiros_5))
prob_5_Tiros_P=partidos_m$Tiros_5_P/(max(partidos_m$Tiros_5_P))
prob_5_Tiros_C=partidos_m$Tiros_5_C/(max(partidos_m$Tiros_5_C))
prob_5_Tiros_PC=partidos_m$Tiros_5_PC/(max(partidos_m$Tiros_5_PC))
prob_5_Taltas=partidos_m$Faltas_5/(max(partidos_m$Faltas_5))
prob_5_Faltas_C=partidos_m$Faltas_5_C/(max(partidos_m$Faltas_5_C))
prob_5_Corners=partidos_m$Corners_5/(max(partidos_m$Corners_5))
prob_5_Corners_C=partidos_m$Corners_C_5/(max(partidos_m$Corners_C_5))
prob_5_Tarjetas_A=partidos_m$Tarjetas_A_5/(max(partidos_m$Tarjetas_A_5))
prob_5_Tarjetas_AC=partidos_m$Tarjetas_AC_5/(max(partidos_m$Tarjetas_AC_5))
prob_5_Tarjetas_R=partidos_m$Tarjetas_R_5/(max(partidos_m$Tarjetas_R_5))
prob_5_Tarjetas_RC=partidos_m$Tarjetas_RC_5/(max(partidos_m$Tarjetas_RC_5))
partidos_m=cbind(partidos_m,prob_5_M,prob_5_R,prob_5_Puntos,prob_5_Tiros,prob_5_Tiros_P,prob_5_Tiros_C,prob_5_Tiros_PC,
prob_5_Taltas,prob_5_Faltas_C,prob_5_Corners,prob_5_Corners_C,
prob_5_Tarjetas_A,prob_5_Tarjetas_AC,prob_5_Tarjetas_R,prob_5_Tarjetas_RC)
View(partidos_m)
partidos_m_total=partidos_m
partidos_m_total=partidos_m_total %>%
subset(Temporada=="2015-2016"|
Temporada=="2016-2017"|Temporada=="2017-2018"|
Temporada=="2018-2019"|Temporada=="2019-2020")
sapply(partidos_m_total, function(x) sum(is.na(x)))
which(colnames(partidos_m_total)=="puntos")
partidos_m_modelo<-partidos_m_total[,-c(1:3,7:11,13:28,30,32,34,37,39,41,43,45,47,49,51,53,55,57,59)]
which(colnames(partidos_m_total)=="puntos")
which(colnames(partidos_m_modelo)=="puntos")
View(partidos_m_modelo)
Madrid_last<-partidos_m_modelo%>%
subset(Equipo=="Real Madrid")
Madrid_last=Madrid_last[1,-c(1:4)]
Eibar_last<-partidos_m_modelo%>%
subset(Equipo=="Eibar")
Eibar_last=Eibar_last[1,-c(1:4)]
Madrid_Eibar=cbind(Madrid_last,Eibar_last)
# Leganes vs Valladolid
Leganes_last<-partidos_m_modelo%>%
subset(Equipo=="Leganes")
Leganes_last=Leganes_last[1,-c(1:4)]
Valladolid_last<-partidos_m_modelo%>%
subset(Equipo=="Valladolid")
Valladolid_last=Valladolid_last[1,-c(1:4)]
Leganes_Valladolid=cbind(Leganes_last,Valladolid_last)
# Valencia vs Levante
Valenica_last<-partidos_m_modelo%>%
subset(Equipo=="Valencia")
Valenica_last=Valenica_last[1,-c(1:4)]
Levante_last<-partidos_m_modelo%>%
subset(Equipo=="Levante")
Levante_last=Levante_last[1,-c(1:4)]
Valencia_Levante=cbind(Valenica_last,Levante_last)
# Mallorca vs Barcelona
Mallorca_last<-partidos_m_modelo%>%
subset(Equipo=="Mallorca")
Mallorca_last=Mallorca_last[1,-c(1:4)]
Barsa_last<-partidos_m_modelo%>%
subset(Equipo=="Barcelona")
Barsa_last=Barsa_last[1,-c(1:4)]
Mallorca_Barca=cbind(Mallorca_last,Barsa_last)
# Celta Vigo vs Villareal
Celta_last<-partidos_m_modelo%>%
subset(Equipo=="Celta")
Celta_last=Celta_last[1,-c(1:4)]
Villareal_last<-partidos_m_modelo%>%
subset(Equipo=="Villarreal")
Villareal_last=Villareal_last[1,-c(1:4)]
Celta_Villarreal=cbind(Celta_last,Villareal_last)
# Español vs Alavés
Español_last<-partidos_m_modelo%>%
subset(Equipo=="Espanol")
Español_last=Español_last[1,-c(1:4)]
Alaves_last<-partidos_m_modelo%>%
subset(Equipo=="Alaves")
Alaves_last=Alaves_last[1,-c(1:4)]
Espanol_Alaves=cbind(Español_last,Alaves_last)
# Real Sociedad vs Osasuna
Sociedad_last<-partidos_m_modelo%>%
subset(Equipo=="Sociedad")
Sociedad_last=Sociedad_last[1,-c(1:4)]
Osasuna_last<-partidos_m_modelo%>%
subset(Equipo=="Osasuna")
Osasuna_last=Osasuna_last[1,-c(1:4)]
Sociedad_osasuna=cbind(Sociedad_last,Osasuna_last)
# Athletic vs Atletico
Bilbao_last<-partidos_m_modelo%>%
subset(Equipo=="Ath Bilbao")
Bilbao_last=Bilbao_last[1,-c(1:4)]
Atletico_last<-partidos_m_modelo%>%
subset(Equipo=="Ath Madrid")
Atletico_last=Atletico_last[1,-c(1:4)]
Bilbao_Atletico=cbind(Bilbao_last,Atletico_last)
# Granda vs Getafe
Granada_last<-partidos_m_modelo%>%
subset(Equipo=="Granada")
Granada_last=Granada_last[1,-c(1:4)]
Getafe_last<-partidos_m_modelo%>%
subset(Equipo=="Getafe")
Getafe_last=Getafe_last[1,-c(1:4)]
Granada_Getafe=cbind(Granada_last,Getafe_last)
# Sevilla vs Betis
Sevilla_last<-partidos_m_modelo%>%
subset(Equipo=="Sevilla")
Sevilla_last=Sevilla_last[1,-c(1:4)]
Betis_last<-partidos_m_modelo%>%
subset(Equipo=="Betis")
Betis_last=Betis_last[1,-c(1:4)]
Sevilla_Betis=cbind(Mallorca_last,Betis_last)
x_test_2<-rbind(Madrid_Eibar,Leganes_Valladolid,Valencia_Levante,Mallorca_Barca,
Celta_Villarreal,Espanol_Alaves,Sociedad_osasuna,Bilbao_Atletico,
Granada_Getafe, Sevilla_Betis)
View(x_test_2)
ncol(partidos_m_modelo)
ncol(x_test_2)
names(x_test_2)<-names(partidos_final[,-1])
x_test_2<-scale(x_test_2)
sapply(x_test_2, function(x) sum(is.na(x)))
sum(is.na(x_test_2))
write.csv(x_test_2,"x_test_2.csv")
x_test_2<-read.csv("x_test_2.csv")
x_test_2<-x_test_2[,-1]
str(x_test_2)
tabla_correlaciones=as.data.frame(cor(x_test_2))
(diagrama_calor=GGally::ggcorr(cor(x_test_2), method = c("everything", "pearson")))
which(tabla_correlaciones >= 0.9 & tabla_correlaciones != 1 | tabla_correlaciones <= -0.9 & tabla_correlaciones != -1, arr.ind=TRUE)
str(partidos_final)
nombres_num<- unlist(lapply(partidos_final, is.numeric))
nombres_num
partidos_num <- partidos_final[,nombres_num]
str(partidos_num)
partidos_scale <- scale(partidos_num) #las varianzas sean 1
partidos_final[,nombres_num] <- partidos_scale
partidos_total_num <- partidos_final[,nombres_num]
partidos_total_num_P=cbind(partidos_total_num,partidos_final$Q)
str(partidos_total_num_P)
View(partidos_total_num_P)
names(partidos_total_num_P)[67]<- "Q"
str(partidos_total_num_P)
sapply(partidos_total_num_P, function(x) sum(is.na(x)))
sum(is.na(partidos_total_num_P))
lapply(partidos_total_num_P[,c(1:66)],var)
write.csv(partidos_total_num_P,"partidos_total_num_P.csv")
partidos_total_num_P<-read.csv("partidos_total_num_P.csv")
View(partidos_total_num_P)
partidos_total_num_P<-partidos_total_num_P[,-1]
partidos_total_num<-partidos_total_num_P[,-67]
tabla_correlaciones=as.data.frame(cor(partidos_total_num))
(diagrama_calor=GGally::ggcorr(cor(partidos_total_num), method = c("everything", "pearson")))
which(tabla_correlaciones >= 0.9 & tabla_correlaciones != 1 | tabla_correlaciones >= 0.9 & tabla_correlaciones != 1, arr.ind=TRUE)
library(caret)
set.seed(666)
sapply(partidos_total_num_P, function(x) sum(is.na(x)))
sum(is.na(partidos_total_num_P))
which(colnames(partidos_total_num_P)=="Quiniela")
p <- createDataPartition(y=partidos_total_num_P$Q,
p= 80/100,
list=FALSE)
training <- partidos_total_num_P[p,]
nrow(training)
x_train <- training[,c(1:66)] # todas las variables
y_train <- training[,67] # color
test <- partidos_total_num_P[-p,]
nrow(test)
x_test <- test[,c(1:66)] # todas las variables
y_test <- test[,67] # resultado
# Creamos un Cross Validation de k=10
xvalidation <- trainControl(method="cv",number=10)
# Opción 1. Entrenamos el modelo con el training set (librería e1071)
library(e1071)
library(naivebayes)
fit_model <- naive_bayes(Q~., data=training,
trControl=xvalidation)
print(fit_model) #solo hay que fijarse en apriori probability, en el resto no
# Opción 2. Entrenamos el modelo con el training set (librería naivebayes)
#install.packages("naivebayes")
library(naivebayes)
m2 <- naive_bayes(Q~., data=training, trControl=xvalidation)
print(m2)
# Opción 3 (con caret)
model <- train(Q~., data=training, trControl=xvalidation, method="nb")
print(model) #LA COLUMNA TRUE ACCURACY ES LA PROBABILIDAD QUE DE PREDIGA BIEN EN TRAIN
predicciones <- predict(fit_model,x_test,type="class")
class(partidos_total_num_P$Q)
# Usamos las variables dependientes (y) del test set para comprobar la fiabilidad de la predicción
library(Metrics) # si está desvalanceado no se puede usar accuracy (se mira al principio)
actual <- y_test
predicted <- predicciones
accuracy(actual,predicted) #si over fita hay que meter nuevos variables, hiperparametros. si la diferencia es mayor que 0.03 overfita, si no no
confusionMatrix(predicted,actual) #los rojos son rojosc308 veces, te predice que los rojos son blancos 11 veces.
library(readxl)
# HAY QUE EJECUTAR EL SIGUIENTE SCRIPT ANTES DE EJECUTAR ESTA PARTE
str(x_test_2) #te dice lo que te podría predecir y en este caso te coje
View(x_test_2)
predicciones_nuevas <- predict(fit_model,x_test_2,type="class") #este es el modelo entrenado (fit_model)
predicciones_nuevas
predicciones_nuevas2 <- predict(fit_model,x_test_2,type="prob")
predicciones_nuevas2 #esto es la probabilidad que el caso anterior es 0 o 1
library(readxl)
library(ggplot2)
library(dplyr)
library(Hmisc)
library(caret)
library(mice)
library(e1071)
library(nortest)
library(ggplot2)
library(plotly)
library(dplyr)
library(gridExtra)
library(ggthemes)
library(csv)
library(xlsx)
library(randomForest)
setwd("C:/Users/Daniel Puente/Desktop/DEMO")
dir()
datos <- read.csv("ccaa_covid19_casos.csv",encoding = "UTF-8")
dim(datos)
setwd("C:/Users/Daniel Puente/Desktop/DEMO")
dir()
datos <- read.csv("ccaa_covid19_casos.csv",encoding = "UTF-8")
dim(datos)
print(datos$CCAA)
pais_vasco<-datos[datos$CCAA=="País Vasco",]
cataluña<-datos[datos$CCAA=="Cataluña",]
madrid<-datos[datos$CCAA=="Madrid",]
plot(t(pais_vasco[-c(1:2)]),type="l",col="red")
par(new=T)
plot(t(cataluña[-c(1:2)]),type="l",col="green")
par(new=T)
plot(t(madrid[-c(1:2)]),type="l",col="blue")
setwd("C:/Users/Daniel Puente/Desktop/DEMO")
dir()
datos <- read.csv("ccaa_covid19_casos.csv",encoding = "UTF-8")
dim(datos)
print(datos$CCAA)
pais_vasco<-datos[datos$CCAA=="País Vasco",]
cataluña<-datos[datos$CCAA=="Cataluña",]
madrid<-datos[datos$CCAA=="Madrid",]
andalucia<-datos[datos$CCAA=="Andalucia",]
plot(t(pais_vasco[-c(1:2)]),type="l",col="red")
par(new=T)
plot(t(cataluña[-c(1:2)]),type="l",col="green")
par(new=T)
plot(t(madrid[-c(1:2)]),type="l",col="blue")
plot(t(andalucia[-c(1:2)]),type="l",col="blue")
